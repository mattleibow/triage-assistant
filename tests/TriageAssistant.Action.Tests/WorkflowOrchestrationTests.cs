using Xunit;
using FluentAssertions;
using TriageAssistant.Core.Configuration;

namespace TriageAssistant.Action.Tests;

public class WorkflowOrchestrationTests
{
    [Fact]
    public void EverythingConfiguration_WithEngagementMode_ShouldHaveRequiredProperties()
    {
        // Arrange
        var config = new EverythingConfiguration
        {
            Token = "test-token",
            RepoOwner = "owner",
            RepoName = "repo",
            Repository = "owner/repo",
            AiEndpoint = "https://ai.endpoint.com",
            AiModel = "gpt-4",
            AiToken = "ai-token",
            ProjectColumn = "Engagement Score",
            TempDir = "/tmp",
            DryRun = false,
            ProjectNumber = 123,
            ApplyScores = true
        };

        // Assert
        config.Token.Should().Be("test-token");
        config.RepoOwner.Should().Be("owner");
        config.RepoName.Should().Be("repo");
        config.ProjectNumber.Should().Be(123);
        config.ApplyScores.Should().BeTrue();
        config.ProjectColumn.Should().Be("Engagement Score");
    }

    [Fact]
    public void LabelTriageWorkflowConfiguration_WithLabelsMode_ShouldHaveRequiredProperties()
    {
        // Arrange
        var config = new LabelTriageWorkflowConfiguration
        {
            Token = "test-token",
            RepoOwner = "owner",
            RepoName = "repo",
            Repository = "owner/repo",
            AiEndpoint = "https://ai.endpoint.com",
            AiModel = "gpt-4",
            AiToken = "ai-token",
            TempDir = "/tmp",
            DryRun = false,
            IssueNumber = 456,
            ApplyLabels = true,
            ApplyComment = false
        };

        // Assert
        config.Token.Should().Be("test-token");
        config.Repository.Should().Be("owner/repo");
        config.IssueNumber.Should().Be(456);
        config.ApplyLabels.Should().BeTrue();
        config.ApplyComment.Should().BeFalse();
        config.AiEndpoint.Should().Be("https://ai.endpoint.com");
        config.AiModel.Should().Be("gpt-4");
        config.AiToken.Should().Be("ai-token");
    }

    [Fact]
    public void SingleLabelTriageWorkflowConfiguration_WithRequiredIssue_ShouldValidate()
    {
        // Arrange
        var config = new SingleLabelTriageWorkflowConfiguration
        {
            Token = "test-token",
            RepoOwner = "owner", 
            RepoName = "repo",
            Repository = "owner/repo",
            AiEndpoint = "https://ai.endpoint.com",
            AiModel = "gpt-4",
            AiToken = "ai-token",
            TempDir = "/tmp",
            DryRun = false,
            IssueNumber = 789,
            ApplyLabels = true,
            ApplyComment = true,
            CommentFooter = "Generated by AI"
        };

        // Assert
        config.IssueNumber.Should().Be(789);
        config.ApplyLabels.Should().BeTrue();
        config.ApplyComment.Should().BeTrue();
        config.CommentFooter.Should().Be("Generated by AI");
    }

    [Fact]
    public void BulkLabelTriageWorkflowConfiguration_WithQuery_ShouldValidate()
    {
        // Arrange
        var config = new BulkLabelTriageWorkflowConfiguration
        {
            Token = "test-token",
            RepoOwner = "owner",
            RepoName = "repo", 
            Repository = "owner/repo",
            AiEndpoint = "https://ai.endpoint.com",
            AiModel = "gpt-4",
            AiToken = "ai-token",
            TempDir = "/tmp",
            DryRun = true,
            IssueQuery = "is:issue state:open label:bug",
            ApplyLabels = false,
            ApplyComment = false
        };

        // Assert
        config.IssueQuery.Should().Be("is:issue state:open label:bug");
        config.ApplyLabels.Should().BeFalse();
        config.DryRun.Should().BeTrue();
    }

    [Fact]
    public void EngagementWorkflowConfiguration_WithProject_ShouldValidate()
    {
        // Arrange
        var config = new EngagementWorkflowConfiguration
        {
            Token = "test-token",
            RepoOwner = "owner",
            RepoName = "repo",
            TempDir = "/tmp",
            DryRun = false,
            ProjectNumber = 123,
            ProjectColumn = "Priority Score",
            ApplyScores = true
        };

        // Assert
        config.ProjectNumber.Should().Be(123);
        config.ProjectColumn.Should().Be("Priority Score");
        config.ApplyScores.Should().BeTrue();
    }

    [Fact]
    public void EngagementWorkflowConfiguration_WithIssue_ShouldValidate()
    {
        // Arrange
        var config = new EngagementWorkflowConfiguration
        {
            Token = "test-token",
            RepoOwner = "owner",
            RepoName = "repo",
            TempDir = "/tmp",
            DryRun = false,
            IssueNumber = 456,
            ProjectColumn = "Engagement Score",
            ApplyScores = false
        };

        // Assert
        config.IssueNumber.Should().Be(456);
        config.ProjectColumn.Should().Be("Engagement Score");
        config.ApplyScores.Should().BeFalse();
    }

    [Theory]
    [InlineData("", "gpt-4", "ai-token", false)] // Empty endpoint
    [InlineData("https://ai.endpoint.com", "", "ai-token", false)] // Empty model  
    [InlineData("https://ai.endpoint.com", "gpt-4", "", false)] // Empty AI token
    [InlineData("", "", "", false)] // All empty
    [InlineData("https://ai.endpoint.com", "gpt-4", "ai-token", true)] // All valid
    public void AiConfiguration_Validation_ShouldValidateRequired(string endpoint, string model, string aiToken, bool shouldBeValid)
    {
        // Arrange
        var hasValidAi = !string.IsNullOrEmpty(endpoint) && 
                        !string.IsNullOrEmpty(model) && 
                        !string.IsNullOrEmpty(aiToken);

        // Assert
        hasValidAi.Should().Be(shouldBeValid);
    }
}